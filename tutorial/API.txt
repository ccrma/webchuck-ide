~ ~ ~ ~ ~ ~ ~ ~ ~ ~
To create theChucK
~ ~ ~ ~ ~ ~ ~ ~ ~ ~

var chuckPrint = function( text )
{
    console.log(text);
}


// START taken from emscripten source
var readAsync = function( url, onload, onerror )
{
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() 
    {
        if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) // file URLs can return 0
        { 
            onload(xhr.response);
            return;
        }
        onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
};

var asyncLoadFile = function( url, onload, onerror ) 
{
    readAsync(url, function(arrayBuffer) {
        onload(new Uint8Array(arrayBuffer));
    }, function(event) {
        if (onerror) {
            onerror();
        } else {
            throw 'Loading data file "' + url + '" failed.';
        }
    });
}
// END taken from emscripten source

var loadWasm = new Promise( function( resolve, reject )
{
    asyncLoadFile( whereIsChuck + '/webchuck.wasm', resolve, reject ); 
});

var preloadFilenames = async function( filenamesToPreload )
{
    var promises = [];
    for( var i = 0; i < filenamesToPreload.length; i++ )
    {
        (function( filenameToPreload )
        {
            promises.push( new Promise( function( resolve, reject )
            {
                asyncLoadFile( filenameToPreload.serverFilename, function( byteArray )
                {
                    filesToPreload.push({
                        filename: filenameToPreload.virtualFilename,
                        data: byteArray
                    });
                    resolve();
                }, function()
                {
                    console.error( "Error fetching file:", filenameToPreload.serverFilename );
                    //reject( e );
                    resolve();
                });
            }) );
        })( filenamesToPreload[i] );
        
    }
    await Promise.all( promises );
}

var theWasm;
var startAudioContext = async function()
{
    theWasm = await loadWasm;
    audioContext = new AudioContext({
        //sampleRate: 48000
    });
    await audioContext.audioWorklet.addModule( whereIsChuck + '/webchuck.js');
}

var startChuck = async function() 
{
    if( audioContext === undefined )
    {
        await startAudioContext();
        
        var newID = currentChuckID;
        currentChuckID++;
        
        theChuck = await createAChuck( newID, theChuckReady );
        theChuck.connect( audioContext.destination );
        theChuckAlmostReady.resolve();
    }
};

~ ~ ~ ~ ~ ~ ~ ~ ~ ~
To call on theChucK
~ ~ ~ ~ ~ ~ ~ ~ ~ ~

self.runCode = function( code )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "runChuckCode", 
                code: code,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.runCodeWithReplacementDac = function( code, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "runChuckCodeWithReplacementDac", 
                code: code,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.runFile = function( filename )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "runChuckFile",
                filename: filename,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.runFileWithReplacementDac = function( filename, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "runChuckFileWithReplacementDac", 
                filename: filename,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.runFileWithArgs = function( filename, colon_separated_args )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "runChuckFileWithArgs", 
                filename: filename,
                colon_separated_args: colon_separated_args,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.runFileWithArgsWithReplacementDac = function( filename, colon_separated_args, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "runChuckFileWithArgs", 
                filename: filename,
                colon_separated_args: colon_separated_args,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceCode = function( code )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "replaceChuckCode",
                code: code,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceCodeWithReplacementDac = function( code, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "replaceChuckCodeWithReplacementDac", 
                code: code,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceFile = function( filename )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "replaceChuckFile",
                filename: filename,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceFileWithReplacementDac = function( filename, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "replaceChuckFileWithReplacementDac", 
                filename: filename,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceFileWithArgs = function( filename, colon_separated_args )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "replaceChuckFileWithArgs", 
                filename: filename,
                colon_separated_args: colon_separated_args,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.replaceFileWithArgsWithReplacementDac = function( filename, colon_separated_args, dac_name )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( { 
                type: "replaceChuckFileWithArgs", 
                filename: filename,
                colon_separated_args: colon_separated_args,
                dac_name: dac_name,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.removeLastCode = function()
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "removeLastCode",
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.removeShred = function( shred )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "removeShred",
                shred: shred,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.isShredActive = function( shred )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: "isShredActive",
                shred: shred,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        // ================== Int, Float, String ============= //
        self.setInt = function( variable, value )
        {
            self.port.postMessage( { 
                type: 'setChuckInt', 
                variable: variable,
                value: value
            } );
        }
        self.getInt = function( variable )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getChuckInt',
                variable: variable,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.setFloat = function( variable, value )
        {
            self.port.postMessage( { 
                type: 'setChuckFloat', 
                variable: variable,
                value: value
            } );
        }
        self.getFloat = function( variable )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getChuckFloat',
                variable: variable,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.setString = function( variable, value )
        {
            self.port.postMessage( { 
                type: 'setChuckString', 
                variable: variable,
                value: value
            } );
        }
        self.getString = function( variable )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getChuckString',
                variable: variable,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        // ================== Event =================== //
        self.signalEvent = function( variable )
        {
            self.port.postMessage( { type: 'signalChuckEvent', variable: variable } );
        }
        self.broadcastEvent = function( variable )
        {
            self.port.postMessage( { type: 'broadcastChuckEvent', variable: variable } );
        }
        self.listenForEventOnce = function( variable, callback )
        {
            var callbackID = self.eventCallbackCounter++;
            self.eventCallbacks[callbackID] = callback;
            self.port.postMessage( { 
                type: 'listenForChuckEventOnce',
                variable: variable,
                callback: callbackID
            } );
        }
        self.startListeningForEvent = function( variable, callback )
        {
            var callbackID = self.eventCallbackCounter++;
            self.eventCallbacks[callbackID] = callback;
            self.port.postMessage( { 
                type: 'startListeningForChuckEvent',
                variable: variable,
                callback: callbackID
            } );
            return callbackID;
        }
        self.stopListeningForEvent = function( variable, callbackID )
        {
            self.port.postMessage( { 
                type: 'stopListeningForChuckEvent',
                variable: variable,
                callback: callbackID
            } );
        }
        // ================== Int[] =================== //
        self.setIntArray = function( variable, values )
        {
            self.port.postMessage( {
                type: 'setGlobalIntArray',
                variable: variable,
                values: values
            } );
        }
        self.getIntArray = function( variable )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalIntArray',
                variable: variable,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.setIntArrayValue = function( variable, index, value )
        {
            self.port.postMessage( {
                type: 'setGlobalIntArrayValue',
                variable: variable,
                index: index,
                value: value
            } );
        }
        self.getIntArrayValue = function( variable, index )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalIntArrayValue',
                variable: variable,
                index: index,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.setAssociativeIntArrayValue = function( variable, key, value )
        {
            self.port.postMessage( {
                type: 'setGlobalAssociativeIntArrayValue',
                variable: variable,
                key: key,
                value: value
            } );
        }
        self.getAssociativeIntArrayValue = function( variable, key )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalAssociativeIntArrayValue',
                variable: variable,
                key: key,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        // ================== Float[] =================== //
        self.setFloatArray = function( variable, values )
        {
            self.port.postMessage( {
                type: 'setGlobalFloatArray',
                variable: variable,
                values: values
            } );
        }
        self.getFloatArray = function( variable )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalFloatArray',
                variable: variable,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        };
        self.setFloatArrayValue = function( variable, index, value )
        {
            self.port.postMessage( {
                type: 'setGlobalFloatArrayValue',
                variable: variable,
                index: index,
                value: value
            } );
        }
        self.getFloatArrayValue = function( variable, index )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalFloatArrayValue',
                variable: variable,
                index: index,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        self.setAssociativeFloatArrayValue = function( variable, key, value )
        {
            self.port.postMessage( {
                type: 'setGlobalAssociativeFloatArrayValue',
                variable: variable,
                key: key,
                value: value
            } );
        }
        self.getAssociativeFloatArrayValue = function( variable, key )
        {
            var callbackID = self.nextDeferID();
            self.port.postMessage( {
                type: 'getGlobalAssociativeFloatArrayValue',
                variable: variable,
                key: key,
                callback: callbackID
            } );
            return self.deferredPromises[callbackID];
        }
        // ================= Clear ====================== //
        self.clearChuckInstance = function()
        {
            self.port.postMessage( { type: 'clearChuckInstance' } );
        }
        self.clearGlobals = function()
        {
            self.port.postMessage( { type: 'clearGlobals' } );
        }